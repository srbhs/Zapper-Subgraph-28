// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Zapper_Swap_General_V1_3__unwrapResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Zapper_Swap_General_V1_3__unwrapWethResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Zapper_Swap_General_V1_3 extends ethereum.SmartContract {
  static bind(address: Address): Zapper_Swap_General_V1_3 {
    return new Zapper_Swap_General_V1_3("Zapper_Swap_General_V1_3", address);
  }

  aToken(param0: Address): Address {
    let result = super.call("aToken", "aToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_aToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("aToken", "aToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cToken(param0: Address): Address {
    let result = super.call("cToken", "cToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_cToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("cToken", "cToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stopped(): boolean {
    let result = super.call("stopped", "stopped():(bool)", []);

    return result[0].toBoolean();
  }

  try_stopped(): ethereum.CallResult<boolean> {
    let result = super.tryCall("stopped", "stopped():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unwrap(
    _toWhomToIssue: Address,
    _FromTokenContractAddress: Address,
    tokens2Trade: BigInt,
    minTokens: BigInt
  ): Zapper_Swap_General_V1_3__unwrapResult {
    let result = super.call(
      "unwrap",
      "unwrap(address,address,uint256,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade),
        ethereum.Value.fromUnsignedBigInt(minTokens)
      ]
    );

    return new Zapper_Swap_General_V1_3__unwrapResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_unwrap(
    _toWhomToIssue: Address,
    _FromTokenContractAddress: Address,
    tokens2Trade: BigInt,
    minTokens: BigInt
  ): ethereum.CallResult<Zapper_Swap_General_V1_3__unwrapResult> {
    let result = super.tryCall(
      "unwrap",
      "unwrap(address,address,uint256,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade),
        ethereum.Value.fromUnsignedBigInt(minTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Zapper_Swap_General_V1_3__unwrapResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  unwrapWeth(
    _toWhomToIssue: Address,
    _FromTokenContractAddress: Address,
    tokens2Trade: BigInt,
    minTokens: BigInt
  ): Zapper_Swap_General_V1_3__unwrapWethResult {
    let result = super.call(
      "unwrapWeth",
      "unwrapWeth(address,address,uint256,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade),
        ethereum.Value.fromUnsignedBigInt(minTokens)
      ]
    );

    return new Zapper_Swap_General_V1_3__unwrapWethResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_unwrapWeth(
    _toWhomToIssue: Address,
    _FromTokenContractAddress: Address,
    tokens2Trade: BigInt,
    minTokens: BigInt
  ): ethereum.CallResult<Zapper_Swap_General_V1_3__unwrapWethResult> {
    let result = super.tryCall(
      "unwrapWeth",
      "unwrapWeth(address,address,uint256,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade),
        ethereum.Value.fromUnsignedBigInt(minTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Zapper_Swap_General_V1_3__unwrapWethResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  yToken(param0: Address): Address {
    let result = super.call("yToken", "yToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_yToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("yToken", "yToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class MultiExchangeSwapCall extends ethereum.Call {
  get inputs(): MultiExchangeSwapCall__Inputs {
    return new MultiExchangeSwapCall__Inputs(this);
  }

  get outputs(): MultiExchangeSwapCall__Outputs {
    return new MultiExchangeSwapCall__Outputs(this);
  }
}

export class MultiExchangeSwapCall__Inputs {
  _call: MultiExchangeSwapCall;

  constructor(call: MultiExchangeSwapCall) {
    this._call = call;
  }

  get toWhomToIssue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minTokenOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get starts(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get withPool(): Array<i32> {
    return this._call.inputValues[5].value.toI32Array();
  }

  get poolData(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }
}

export class MultiExchangeSwapCall__Outputs {
  _call: MultiExchangeSwapCall;

  constructor(call: MultiExchangeSwapCall) {
    this._call = call;
  }

  get tokensBought(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddATokenCall extends ethereum.Call {
  get inputs(): AddATokenCall__Inputs {
    return new AddATokenCall__Inputs(this);
  }

  get outputs(): AddATokenCall__Outputs {
    return new AddATokenCall__Outputs(this);
  }
}

export class AddATokenCall__Inputs {
  _call: AddATokenCall;

  constructor(call: AddATokenCall) {
    this._call = call;
  }

  get _aToken(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddATokenCall__Outputs {
  _call: AddATokenCall;

  constructor(call: AddATokenCall) {
    this._call = call;
  }
}

export class AddCTokenCall extends ethereum.Call {
  get inputs(): AddCTokenCall__Inputs {
    return new AddCTokenCall__Inputs(this);
  }

  get outputs(): AddCTokenCall__Outputs {
    return new AddCTokenCall__Outputs(this);
  }
}

export class AddCTokenCall__Inputs {
  _call: AddCTokenCall;

  constructor(call: AddCTokenCall) {
    this._call = call;
  }

  get _cToken(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddCTokenCall__Outputs {
  _call: AddCTokenCall;

  constructor(call: AddCTokenCall) {
    this._call = call;
  }
}

export class AddYTokenCall extends ethereum.Call {
  get inputs(): AddYTokenCall__Inputs {
    return new AddYTokenCall__Inputs(this);
  }

  get outputs(): AddYTokenCall__Outputs {
    return new AddYTokenCall__Outputs(this);
  }
}

export class AddYTokenCall__Inputs {
  _call: AddYTokenCall;

  constructor(call: AddYTokenCall) {
    this._call = call;
  }

  get _yToken(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddYTokenCall__Outputs {
  _call: AddYTokenCall;

  constructor(call: AddYTokenCall) {
    this._call = call;
  }
}

export class InCaseTokengetsStuckCall extends ethereum.Call {
  get inputs(): InCaseTokengetsStuckCall__Inputs {
    return new InCaseTokengetsStuckCall__Inputs(this);
  }

  get outputs(): InCaseTokengetsStuckCall__Outputs {
    return new InCaseTokengetsStuckCall__Outputs(this);
  }
}

export class InCaseTokengetsStuckCall__Inputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }

  get _TokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InCaseTokengetsStuckCall__Outputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall extends ethereum.Call {
  get inputs(): ToggleContractActiveCall__Inputs {
    return new ToggleContractActiveCall__Inputs(this);
  }

  get outputs(): ToggleContractActiveCall__Outputs {
    return new ToggleContractActiveCall__Outputs(this);
  }
}

export class ToggleContractActiveCall__Inputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall__Outputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnwrapCall extends ethereum.Call {
  get inputs(): UnwrapCall__Inputs {
    return new UnwrapCall__Inputs(this);
  }

  get outputs(): UnwrapCall__Outputs {
    return new UnwrapCall__Outputs(this);
  }
}

export class UnwrapCall__Inputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _FromTokenContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens2Trade(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UnwrapCall__Outputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }

  get tokensUnwrapped(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get toToken(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class UnwrapWethCall extends ethereum.Call {
  get inputs(): UnwrapWethCall__Inputs {
    return new UnwrapWethCall__Inputs(this);
  }

  get outputs(): UnwrapWethCall__Outputs {
    return new UnwrapWethCall__Outputs(this);
  }
}

export class UnwrapWethCall__Inputs {
  _call: UnwrapWethCall;

  constructor(call: UnwrapWethCall) {
    this._call = call;
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _FromTokenContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens2Trade(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UnwrapWethCall__Outputs {
  _call: UnwrapWethCall;

  constructor(call: UnwrapWethCall) {
    this._call = call;
  }

  get tokensUnwrapped(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get toToken(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class WrapCall extends ethereum.Call {
  get inputs(): WrapCall__Inputs {
    return new WrapCall__Inputs(this);
  }

  get outputs(): WrapCall__Outputs {
    return new WrapCall__Outputs(this);
  }
}

export class WrapCall__Inputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _FromTokenContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ToTokenContractAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokens2Trade(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _wrapInto(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class WrapCall__Outputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }

  get tokensWrapped(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

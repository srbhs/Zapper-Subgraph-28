// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ETH_ERC20_Curve_General_Zap_V1 extends ethereum.SmartContract {
  static bind(address: Address): ETH_ERC20_Curve_General_Zap_V1 {
    return new ETH_ERC20_Curve_General_Zap_V1(
      "ETH_ERC20_Curve_General_Zap_V1",
      address
    );
  }

  DaiTokenAddress(): Address {
    let result = super.call(
      "DaiTokenAddress",
      "DaiTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_DaiTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "DaiTokenAddress",
      "DaiTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UniSwapFactoryAddress(): Address {
    let result = super.call(
      "UniSwapFactoryAddress",
      "UniSwapFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_UniSwapFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UniSwapFactoryAddress",
      "UniSwapFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UsdcTokenAddress(): Address {
    let result = super.call(
      "UsdcTokenAddress",
      "UsdcTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_UsdcTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UsdcTokenAddress",
      "UsdcTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _owner(): Address {
    let result = super.call("_owner", "_owner():(address)", []);

    return result[0].toAddress();
  }

  try__owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("_owner", "_owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bUSDCurveExchangeAddress(): Address {
    let result = super.call(
      "bUSDCurveExchangeAddress",
      "bUSDCurveExchangeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bUSDCurveExchangeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bUSDCurveExchangeAddress",
      "bUSDCurveExchangeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bUSDCurvePoolTokenAddress(): Address {
    let result = super.call(
      "bUSDCurvePoolTokenAddress",
      "bUSDCurvePoolTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bUSDCurvePoolTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bUSDCurvePoolTokenAddress",
      "bUSDCurvePoolTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dzgoodwillAddress(): Address {
    let result = super.call(
      "dzgoodwillAddress",
      "dzgoodwillAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dzgoodwillAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dzgoodwillAddress",
      "dzgoodwillAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  goodwill(): i32 {
    let result = super.call("goodwill", "goodwill():(uint16)", []);

    return result[0].toI32();
  }

  try_goodwill(): ethereum.CallResult<i32> {
    let result = super.tryCall("goodwill", "goodwill():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paxCurveExchangeAddress(): Address {
    let result = super.call(
      "paxCurveExchangeAddress",
      "paxCurveExchangeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_paxCurveExchangeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "paxCurveExchangeAddress",
      "paxCurveExchangeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paxCurvePoolTokenAddress(): Address {
    let result = super.call(
      "paxCurvePoolTokenAddress",
      "paxCurvePoolTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_paxCurvePoolTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "paxCurvePoolTokenAddress",
      "paxCurvePoolTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sUSDCurveExchangeAddress(): Address {
    let result = super.call(
      "sUSDCurveExchangeAddress",
      "sUSDCurveExchangeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_sUSDCurveExchangeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sUSDCurveExchangeAddress",
      "sUSDCurveExchangeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sUSDCurvePoolTokenAddress(): Address {
    let result = super.call(
      "sUSDCurvePoolTokenAddress",
      "sUSDCurvePoolTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_sUSDCurvePoolTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sUSDCurvePoolTokenAddress",
      "sUSDCurvePoolTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yCurveExchangeAddress(): Address {
    let result = super.call(
      "yCurveExchangeAddress",
      "yCurveExchangeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_yCurveExchangeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "yCurveExchangeAddress",
      "yCurveExchangeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yCurvePoolTokenAddress(): Address {
    let result = super.call(
      "yCurvePoolTokenAddress",
      "yCurvePoolTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_yCurvePoolTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "yCurvePoolTokenAddress",
      "yCurvePoolTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _goodwill(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _dzgoodwillAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ZapInCall extends ethereum.Call {
  get inputs(): ZapInCall__Inputs {
    return new ZapInCall__Inputs(this);
  }

  get outputs(): ZapInCall__Outputs {
    return new ZapInCall__Outputs(this);
  }
}

export class ZapInCall__Inputs {
  _call: ZapInCall;

  constructor(call: ZapInCall) {
    this._call = call;
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _IncomingTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _curvePoolExchangeAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _IncomingTokenQty(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ZapInCall__Outputs {
  _call: ZapInCall;

  constructor(call: ZapInCall) {
    this._call = call;
  }

  get crvTokensBought(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveTokenCall extends ethereum.Call {
  get inputs(): ApproveTokenCall__Inputs {
    return new ApproveTokenCall__Inputs(this);
  }

  get outputs(): ApproveTokenCall__Outputs {
    return new ApproveTokenCall__Outputs(this);
  }
}

export class ApproveTokenCall__Inputs {
  _call: ApproveTokenCall;

  constructor(call: ApproveTokenCall) {
    this._call = call;
  }
}

export class ApproveTokenCall__Outputs {
  _call: ApproveTokenCall;

  constructor(call: ApproveTokenCall) {
    this._call = call;
  }
}

export class DestructCall extends ethereum.Call {
  get inputs(): DestructCall__Inputs {
    return new DestructCall__Inputs(this);
  }

  get outputs(): DestructCall__Outputs {
    return new DestructCall__Outputs(this);
  }
}

export class DestructCall__Inputs {
  _call: DestructCall;

  constructor(call: DestructCall) {
    this._call = call;
  }
}

export class DestructCall__Outputs {
  _call: DestructCall;

  constructor(call: DestructCall) {
    this._call = call;
  }
}

export class InCaseTokengetsStuckCall extends ethereum.Call {
  get inputs(): InCaseTokengetsStuckCall__Inputs {
    return new InCaseTokengetsStuckCall__Inputs(this);
  }

  get outputs(): InCaseTokengetsStuckCall__Outputs {
    return new InCaseTokengetsStuckCall__Outputs(this);
  }
}

export class InCaseTokengetsStuckCall__Inputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }

  get _TokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InCaseTokengetsStuckCall__Outputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetnewdzgoodwillAddressCall extends ethereum.Call {
  get inputs(): SetnewdzgoodwillAddressCall__Inputs {
    return new SetnewdzgoodwillAddressCall__Inputs(this);
  }

  get outputs(): SetnewdzgoodwillAddressCall__Outputs {
    return new SetnewdzgoodwillAddressCall__Outputs(this);
  }
}

export class SetnewdzgoodwillAddressCall__Inputs {
  _call: SetnewdzgoodwillAddressCall;

  constructor(call: SetnewdzgoodwillAddressCall) {
    this._call = call;
  }

  get _new_dzgoodwillAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetnewdzgoodwillAddressCall__Outputs {
  _call: SetnewdzgoodwillAddressCall;

  constructor(call: SetnewdzgoodwillAddressCall) {
    this._call = call;
  }
}

export class SetnewgoodwillCall extends ethereum.Call {
  get inputs(): SetnewgoodwillCall__Inputs {
    return new SetnewgoodwillCall__Inputs(this);
  }

  get outputs(): SetnewgoodwillCall__Outputs {
    return new SetnewgoodwillCall__Outputs(this);
  }
}

export class SetnewgoodwillCall__Inputs {
  _call: SetnewgoodwillCall;

  constructor(call: SetnewgoodwillCall) {
    this._call = call;
  }

  get _new_goodwill(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetnewgoodwillCall__Outputs {
  _call: SetnewgoodwillCall;

  constructor(call: SetnewgoodwillCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall extends ethereum.Call {
  get inputs(): ToggleContractActiveCall__Inputs {
    return new ToggleContractActiveCall__Inputs(this);
  }

  get outputs(): ToggleContractActiveCall__Outputs {
    return new ToggleContractActiveCall__Outputs(this);
  }
}

export class ToggleContractActiveCall__Inputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall__Outputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
